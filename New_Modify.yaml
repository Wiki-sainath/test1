---
- name: Detect and Execute OS-specific tasks
  hosts: all
  gather_facts: yes
  vars:
    domain_name: "wikilab.asia"
    username: "sainath@wikilab.asia"
    password: "Redhat123"
#    ansible_python_interpreter: /usr/bin/python3.6

  tasks:

    - name: Gather OS version and distribution facts
      debug:
        var: ansible_distribution_version
      register: os_version

    - name: Extract OS major version from facts
      set_fact:
        ansible_distribution_major_version: "{{ ansible_distribution_version.split('.')[0] }}"

    - name: Print the OS major version
      debug:
        var: ansible_distribution_major_version
    
#     - name: Get realm list
#      shell: realm list
#      register: check_realm
#      when: ansible_distribution_major_version|int != 6
    - name: Install realm package and get realm list
      shell: |
            if ! rpm -q realm; then
            yum install -y realmd || echo "Error: No package realm available"
            fi
            realm list | egrep "realm-name|domain-name"
      register: check_realm
      when: ansible_distribution_major_version|int != 6
      failed_when: "'Error: No package realm available' in check_realm.stdout"
  
    - name: Checking..... (Skipping means not Joined)
      debug:
        msg: "System is already joined to a realm"
      when: check_realm.rc == 0 and check_realm.stdout.strip() != "" and "Not joined" not in check_realm.stdout


    #Install necessary packages
    - name: Install realm package along with sssd
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - realmd
        - adcli
        - sssd
        - authconfig
        - oddjob
        - oddjob-mkhomedir
        - samba-common-tools
        - lsof
      when: not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Join domain (RHEL 6 compatible)
      shell: echo -n "{{password}}" | adcli join {{domain_name}} -U {{username}} -v --stdin-password
      register: join_domain
      ignore_errors: yes
      no_log: True
      when: ansible_distribution_major_version|int == 6

    - name: Join domain (RHEL 7, 8, 9)
      shell: echo "{{password}}" | realm join {{domain_name}} -U sainath --verbose
      register: join_domain
      ignore_errors: yes
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Modify SSSD Configuration in RHEL7, 8 and 9
      copy:
        src: testfolder/sssd.conf
        dest: /etc/sssd/
        mode: "0600"
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Add cert path to the ldap.conf in RHEL7, 8 and 9
      lineinfile:
        path: /etc/openldap/ldap.conf
        insertafter: BOF
        line: 'TLS_CACERT      /etc/openldap/certs/LDAPS_CERT8.cer'
        state: present
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""      

    - name: start and enable oddjobd.service
      service:
        name: oddjobd.service
        state: started
        enabled: yes
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""       

    - name: Modify SSSD Configuration in RHEL6
      copy:
        src: testfolder/sssd.conf_rhel6
        dest: /etc/sssd/sssd.conf
        mode: "0600"
      when: ansible_distribution_major_version|int == 6

    - name: Modify ldap Configuration in RHEL6
      copy:
        src: testfolder/ldap.conf_rhel6
        dest: /etc/openldap/ldap.conf
        mode: "0644"
      when: ansible_distribution_major_version|int == 6

    - name: Copy LDAP CERT
      copy:
        src: testfolder/LDAPS_CERT8.cer
        dest: /etc/openldap/certs
        mode: "0655"

    - name: CERT Rehash in RHLE 6
      shell: cacertdir_rehash /etc/openldap/certs
      when: ansible_distribution_major_version|int == 6
  
    - name: Restart sssd
      service:
        name: sssd
        state: restarted

    - name: login and print the working directory via ssh
      shell: id {{username}}
      register: id
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: print the value
      debug:
        var: id.stdout_lines
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: login Before Blacklisting. (If SSH fails need to validate)
      shell: sshpass -p "{{password}}" ssh {{username}}@localhost pwd
      register: ssh
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: print the value of login Before Blacklisting
      debug:
        var: ssh.stdout_lines
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Blacklisting all Users
      shell: realm permit -x {{username}}
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Blacklisting all Groups
      shell: realm permit -xg {{username}}
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: login via ssh to user After Blacklisting
      shell: sshpass -p "{{password}}" ssh {{username}}@localhost pwd
      register: ssh
      ignore_errors: yes
      when: ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""

    - name: Print message based on SSH exit code (improved)
      debug:
        msg: "{{ 'All Users are blacklisted' if ssh.rc == 255 else 'Permission Denied' }}"  # Conditional message
      when: ssh.rc in (255, 5) and ansible_distribution_major_version|int != 6 and not check_realm.rc == 0 or check_realm.stdout.strip() == ""
